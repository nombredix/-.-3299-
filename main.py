import discord
from discord.ext import commands
import os
import asyncio
import logging
from datetime import datetime
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Configuration du bot
intents = discord.Intents.default()
intents.members = True
intents.message_content = True

bot = commands.Bot(command_prefix='+', intents=intents)

# Variables d'environnement
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
TEMP_ROLE_ID = int(os.getenv('TEMP_ROLE_ID', '0'))
MEN_ROLE_ID = int(os.getenv('MEN_ROLE_ID', '0'))
WOMEN_ROLE_ID = int(os.getenv('WOMEN_ROLE_ID', '0'))
MUTE_ROLE_ID = int(os.getenv('MUTE_ROLE_ID', '0'))
PRISON_ROLE_ID = int(os.getenv('PRISON_ROLE_ID', '0'))
LOG_CHANNEL_ID = int(os.getenv('LOG_CHANNEL_ID', '0'))
GUILD_ID = int(os.getenv('GUILD_ID', '0'))

class VerificationBot:
    def __init__(self, bot):
        self.bot = bot
        self.saved_roles = {}
        
    async def log_action(self, action, admin, member, role_assigned=None):
        try:
            log_channel = self.bot.get_channel(LOG_CHANNEL_ID)
            if log_channel:
                embed = discord.Embed(
                    title="üìã Action de V√©rification",
                    color=0x00ff00 if role_assigned else 0xff9900,
                    timestamp=datetime.utcnow()
                )
                embed.add_field(name="Action", value=action, inline=False)
                embed.add_field(name="Administrateur", value=f"{admin.mention} ({admin.id})", inline=True)
                embed.add_field(name="Membre", value=f"{member.mention} ({member.id})", inline=True)
                if role_assigned:
                    embed.add_field(name="R√¥le Attribu√©", value=role_assigned.name, inline=True)
                await log_channel.send(embed=embed)
        except Exception as e:
            logger.error(f"Erreur lors du logging: {e}")

    async def assign_temp_role(self, member):
        try:
            guild = member.guild
            temp_role = guild.get_role(TEMP_ROLE_ID)
            
            if temp_role:
                await member.add_roles(temp_role, reason="Attribution automatique du r√¥le temporaire")
                logger.info(f"R√¥le temporaire attribu√© √† {member.display_name}")
                await self.log_action("Attribution automatique du r√¥le temporaire", guild.me, member)
            else:
                logger.error(f"R√¥le temporaire (ID: {TEMP_ROLE_ID}) non trouv√©")
        except Exception as e:
            logger.error(f"Erreur lors de l'attribution du r√¥le temporaire: {e}")

    async def verify_member(self, ctx, member, gender_role_id):
        try:
            guild = ctx.guild
            temp_role = guild.get_role(TEMP_ROLE_ID)
            gender_role = guild.get_role(gender_role_id)
            
            if not gender_role:
                await ctx.send("‚ùå Erreur: R√¥le de genre non trouv√© dans la configuration.")
                return False
                
            if temp_role and temp_role not in member.roles:
                await ctx.send(f"‚ö†Ô∏è {member.mention} ne poss√®de pas le r√¥le temporaire. Il a peut-√™tre d√©j√† √©t√© v√©rifi√©.")
                return False

            if temp_role and temp_role in member.roles:
                await member.remove_roles(temp_role, reason=f"V√©rification par {ctx.author}")
                
            await member.add_roles(gender_role, reason=f"V√©rification par {ctx.author}")
            
            await ctx.send(f"‚úÖ {member.mention} a √©t√© v√©rifi√©(e) avec succ√®s et a re√ßu le r√¥le {gender_role.name}!")
            await self.log_action(f"V√©rification manuelle - Attribution du r√¥le {gender_role.name}", ctx.author, member, gender_role)
            
            logger.info(f"{member.display_name} v√©rifi√© par {ctx.author.display_name} avec le r√¥le {gender_role.name}")
            return True
            
        except discord.Forbidden:
            await ctx.send("‚ùå Je n'ai pas les permissions n√©cessaires pour g√©rer les r√¥les de ce membre.")
            logger.error(f"Permissions insuffisantes pour v√©rifier {member.display_name}")
            return False
            
        except Exception as e:
            await ctx.send(f"‚ùå Une erreur s'est produite lors de la v√©rification: {str(e)}")
            logger.error(f"Erreur lors de la v√©rification de {member.display_name}: {e}")
            return False

    async def save_user_roles(self, member):
        roles_to_save = [role.id for role in member.roles if role.id != member.guild.default_role.id and role.id != TEMP_ROLE_ID]
        self.saved_roles[member.id] = roles_to_save
        logger.info(f"R√¥les sauvegard√©s pour {member.display_name}: {len(roles_to_save)} r√¥les")

    async def restore_user_roles(self, member):
        if member.id not in self.saved_roles:
            return False
        
        guild = member.guild
        roles_to_restore = [guild.get_role(role_id) for role_id in self.saved_roles[member.id] if guild.get_role(role_id)]
        
        if roles_to_restore:
            try:
                await member.add_roles(*roles_to_restore, reason="Restauration des r√¥les apr√®s sanction")
                logger.info(f"R√¥les restaur√©s pour {member.display_name}: {len(roles_to_restore)} r√¥les")
            except Exception as e:
                logger.error(f"Erreur lors de la restauration des r√¥les pour {member.display_name}: {e}")
                return False
        
        del self.saved_roles[member.id]
        return True

    async def apply_sanction(self, ctx, member, sanction_role_id, action_name):
        try:
            guild = ctx.guild
            sanction_role = guild.get_role(sanction_role_id)
            
            if not sanction_role:
                await ctx.send(f"‚ùå Erreur: R√¥le de {action_name} non trouv√© dans la configuration.")
                return False
            
            if sanction_role in member.roles:
                await ctx.send(f"‚ö†Ô∏è {member.mention} poss√®de d√©j√† le r√¥le {sanction_role.name}.")
                return False
            
            await self.save_user_roles(member)
            
            roles_to_remove = [role for role in member.roles if role.id != guild.default_role.id]
            if roles_to_remove:
                await member.remove_roles(*roles_to_remove, reason=f"{action_name} par {ctx.author}")
            
            await member.add_roles(sanction_role, reason=f"{action_name} par {ctx.author}")
            
            await ctx.send(f"üîí {member.mention} a √©t√© {action_name.lower()}(e) avec succ√®s!")
            
            await self.log_action(f"{action_name} appliqu√©(e)", ctx.author, member, sanction_role)
            
            logger.info(f"{member.display_name} {action_name.lower()}(e) par {ctx.author.display_name}")
            return True
            
        except discord.Forbidden:
            await ctx.send("‚ùå Je n'ai pas les permissions n√©cessaires pour g√©rer les r√¥les de ce membre.")
            logger.error(f"Permissions insuffisantes pour {action_name.lower()} {member.display_name}")
            return False
            
        except Exception as e:
            await ctx.send(f"‚ùå Une erreur s'est produite lors de l'application de la sanction: {str(e)}")
            logger.error(f"Erreur lors de l'application de la sanction √† {member.display_name}: {e}")
            return False

# Initialisation de la classe de v√©rification
verification_bot = VerificationBot(bot)

@bot.event
async def on_ready():
    """√âv√©nement d√©clench√© quand le bot est pr√™t"""
    logger.info(f'{bot.user} est connect√© et pr√™t!')
    
    # Afficher un message de confirmation dans un canal sp√©cifique
    guild = bot.get_guild(GUILD_ID)
    if guild:
        channel = guild.text_channels[0]  # Vous pouvez choisir un canal sp√©cifique
        await channel.send("üí¨ Le bot a d√©marr√© avec succ√®s et est maintenant pr√™t √† √™tre utilis√©!")

    # V√©rification de la configuration
    missing_roles = []
    if not guild.get_role(TEMP_ROLE_ID):
        missing_roles.append(f"R√¥le temporaire (ID: {TEMP_ROLE_ID})")
    if not guild.get_role(MEN_ROLE_ID):
        missing_roles.append(f"R√¥le hommes (ID: {MEN_ROLE_ID})")
    if not guild.get_role(WOMEN_ROLE_ID):
        missing_roles.append(f"R√¥le femmes (ID: {WOMEN_ROLE_ID})")
        
    if missing_roles:
        logger.warning(f"R√¥les manquants: {', '.join(missing_roles)}")
        
    if not bot.get_channel(LOG_CHANNEL_ID):
        logger.warning(f"Canal de logs (ID: {LOG_CHANNEL_ID}) non trouv√©")

@bot.event
async def on_member_join(member):
    """√âv√©nement d√©clench√© quand un nouveau membre rejoint le serveur"""
    logger.info(f"Nouveau membre: {member.display_name} ({member.id})")
    
    if member.guild.id != GUILD_ID:
        return
        
    await asyncio.sleep(1)
    await verification_bot.assign_temp_role(member)

def is_admin():
    async def predicate(ctx):
        if not ctx.author.guild_permissions.administrator:
            await ctx.send("‚ùå Cette commande est r√©serv√©e aux administrateurs.")
            logger.warning(f"{ctx.author.display_name} a tent√© d'utiliser une commande admin sans permissions")
            return False
        return True
    return commands.check(predicate)

@bot.command(name='men')
@is_admin()
async def verify_men(ctx, member: discord.Member = None):
    if member is None and ctx.message.reference:
        try:
            replied_message = await ctx.channel.fetch_message(ctx.message.reference.message_id)
            member = replied_message.author
        except:
            pass
    
    if member is None:
        await ctx.send("‚ùå Veuillez mentionner un membre ou r√©pondre √† son message.")
        return
        
    await verification_bot.verify_member(ctx, member, MEN_ROLE_ID)

@bot.command(name='wom')
@is_admin()
async def verify_women(ctx, member: discord.Member = None):
    if member is None and ctx.message.reference:
        try:
            replied_message = await ctx.channel.fetch_message(ctx.message.reference.message_id)
            member = replied_message.author
        except:
            pass
    
    if member is None:
        await ctx.send("‚ùå Veuillez mentionner un membre ou r√©pondre √† son message.")
        return
        
    await verification_bot.verify_member(ctx, member, WOMEN_ROLE_ID)

@bot.command(name='mute')
@is_admin()
async def mute_member(ctx, member: discord.Member = None, *, reason="Aucune raison sp√©cifi√©e"):
    if member is None and ctx.message.reference:
        try:
            replied_message = await ctx.channel.fetch_message(ctx.message.reference.message_id)
            member = replied_message.author
        except:
            pass
    
    if member is None:
        await ctx.send("‚ùå Veuillez mentionner un membre ou r√©pondre √† son message.")
        return
    
    await verification_bot.apply_sanction(ctx, member, MUTE_ROLE_ID, "Mute")

@bot.command(name='hebs')
@is_admin()
async def prison_member(ctx, member: discord.Member = None, *, reason="Aucune raison sp√©cifi√©e"):
    if member is None and ctx.message.reference:
        try:
            replied_message = await ctx.channel.fetch_message(ctx.message.reference.message_id)
            member = replied_message.author
        except:
            pass
    
    if member is None:
        await ctx.send("‚ùå Veuillez mentionner un membre ou r√©pondre √† son message.")
        return
    
    await verification_bot.apply_sanction(ctx, member, PRISON_ROLE_ID, "Prison")

@bot.command(name='unhebs')
@is_admin()
async def unprison_member(ctx, member: discord.Member = None):
    if member is None and ctx.message.reference:
        try:
            replied_message = await ctx.channel.fetch_message(ctx.message.reference.message_id)
            member = replied_message.author
        except:
            pass
    
    if member is None:
        await ctx.send("‚ùå Veuillez mentionner un membre ou r√©pondre √† son message.")
        return
    
    try:
        guild = ctx.guild
        prison_role = guild.get_role(PRISON_ROLE_ID)
        mute_role = guild.get_role(MUTE_ROLE_ID)
        
        if not (prison_role in member.roles or mute_role in member.roles):
            await ctx.send(f"‚ö†Ô∏è {member.mention} n'est pas en prison ou mut√©.")
            return
        
        roles_to_remove = []
        if prison_role in member.roles:
            roles_to_remove.append(prison_role)
        if mute_role in member.roles:
            roles_to_remove.append(mute_role)
        
        if roles_to_remove:
            await member.remove_roles(*roles_to_remove, reason=f"Lib√©ration par {ctx.author}")
        
        restored = await verification_bot.restore_user_roles(member)
        
        if restored:
            await ctx.send(f"üîì {member.mention} a √©t√© lib√©r√©(e) et ses r√¥les ont √©t√© restaur√©s!")
        else:
            await ctx.send(f"üîì {member.mention} a √©t√© lib√©r√©(e) mais aucun r√¥le sauvegard√© trouv√©.")
        
        await verification_bot.log_action("Lib√©ration de prison/mute", ctx.author, member)
        logger.info(f"{member.display_name} lib√©r√©(e) par {ctx.author.display_name}")
        
    except discord.Forbidden:
        await ctx.send("‚ùå Je n'ai pas les permissions n√©cessaires pour g√©rer les r√¥les de ce membre.")
        logger.error(f"Permissions insuffisantes pour lib√©rer {member.display_name}")
        
    except Exception as e:
        await ctx.send(f"‚ùå Une erreur s'est produite lors de la lib√©ration: {str(e)}")
        logger.error(f"Erreur lors de la lib√©ration de {member.display_name}: {e}")

# Ex√©cution du bot
if __name__ == "__main__":
    if DISCORD_TOKEN:
        bot.run(DISCORD_TOKEN)
    else:
        logger.error("Token Discord non configur√©")
        print("‚ùå Token Discord non configur√©")
