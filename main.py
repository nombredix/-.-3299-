import discord
from discord.ext import commands
import os
import asyncio
import logging
from datetime import datetime
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Configuration du bot
intents = discord.Intents.default()
intents.members = True  # Permet d'acc√©der aux informations des membres
intents.message_content = True  # Permet d'acc√©der au contenu des messages

bot = commands.Bot(command_prefix='+', intents=intents)

# Variables d'environnement
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
TEMP_ROLE_ID = int(os.getenv('TEMP_ROLE_ID', '0'))
MEN_ROLE_ID = int(os.getenv('MEN_ROLE_ID', '0'))
WOMEN_ROLE_ID = int(os.getenv('WOMEN_ROLE_ID', '0'))
MUTE_ROLE_ID = int(os.getenv('MUTE_ROLE_ID', '0'))
PRISON_ROLE_ID = int(os.getenv('PRISON_ROLE_ID', '0'))
LOG_CHANNEL_ID = int(os.getenv('LOG_CHANNEL_ID', '0'))
GUILD_ID = int(os.getenv('GUILD_ID', '0'))

class VerificationBot:
    def __init__(self, bot):
        self.bot = bot
        # Dictionnaire pour sauvegarder les r√¥les avant sanctions {user_id: [role_ids]}
        self.saved_roles = {}

    async def log_action(self, action, admin, member, role_assigned=None):
        """Enregistre les actions dans le canal de logs"""
        try:
            log_channel = self.bot.get_channel(LOG_CHANNEL_ID)
            if log_channel:
                embed = discord.Embed(
                    title="üìã Action de V√©rification",
                    color=0x00ff00 if role_assigned else 0xff9900,
                    timestamp=datetime.utcnow()
                )
                embed.add_field(name="Action", value=action, inline=False)
                embed.add_field(name="Administrateur", value=f"{admin.mention} ({admin.id})", inline=True)
                embed.add_field(name="Membre", value=f"{member.mention} ({member.id})", inline=True)
                if role_assigned:
                    embed.add_field(name="R√¥le Attribu√©", value=role_assigned.name, inline=True)

                await log_channel.send(embed=embed)
        except Exception as e:
            logger.error(f"Erreur lors du logging: {e}")

    async def assign_temp_role(self, member):
        """Attribue le r√¥le temporaire √† un nouveau membre"""
        try:
            guild = member.guild
            temp_role = guild.get_role(TEMP_ROLE_ID)

            if temp_role:
                await member.add_roles(temp_role, reason="Attribution automatique du r√¥le temporaire")
                logger.info(f"R√¥le temporaire attribu√© √† {member.display_name}")
                # Log de l'attribution automatique
                await self.log_action("Attribution automatique du r√¥le temporaire", guild.me, member)
            else:
                logger.error(f"R√¥le temporaire (ID: {TEMP_ROLE_ID}) non trouv√©")
        except Exception as e:
            logger.error(f"Erreur lors de l'attribution du r√¥le temporaire: {e}")

    async def verify_member(self, ctx, member, gender_role_id):
        """V√©rifie un membre et lui attribue le r√¥le appropri√©"""
        try:
            guild = ctx.guild
            temp_role = guild.get_role(TEMP_ROLE_ID)
            gender_role = guild.get_role(gender_role_id)

            if not gender_role:
                await ctx.send("‚ùå Erreur: R√¥le de genre non trouv√© dans la configuration.")
                return False

            # V√©rifier si le membre a le r√¥le temporaire
            if temp_role and temp_role not in member.roles:
                await ctx.send(f"‚ö†Ô∏è {member.mention} ne poss√®de pas le r√¥le temporaire. Il a peut-√™tre d√©j√† √©t√© v√©rifi√©.")
                return False

            # Supprimer le r√¥le temporaire s'il existe
            if temp_role and temp_role in member.roles:
                await member.remove_roles(temp_role, reason=f"V√©rification par {ctx.author}")

            # Ajouter le r√¥le de genre
            await member.add_roles(gender_role, reason=f"V√©rification par {ctx.author}")

            # Message de confirmation avec un Embed
            embed = discord.Embed(
                title="‚úÖ V√©rification r√©ussie",
                description=f"{member.mention} a √©t√© v√©rifi√©(e) avec succ√®s et a re√ßu le r√¥le {gender_role.name}!",
                color=0x00ff00,
                timestamp=datetime.utcnow()
            )
            await ctx.send(embed=embed)

            # Log de l'action
            await self.log_action(
                f"V√©rification manuelle - Attribution du r√¥le {gender_role.name}",
                ctx.author,
                member,
                gender_role
            )
            logger.info(f"{member.display_name} v√©rifi√© par {ctx.author.display_name} avec le r√¥le {gender_role.name}")
            return True

        except discord.Forbidden:
            await ctx.send("‚ùå Je n'ai pas les permissions n√©cessaires pour g√©rer les r√¥les de ce membre.")
            logger.error(f"Permissions insuffisantes pour v√©rifier {member.display_name}")
            return False

        except Exception as e:
            await ctx.send(f"‚ùå Une erreur s'est produite lors de la v√©rification: {str(e)}")
            logger.error(f"Erreur lors de la v√©rification de {member.display_name}: {e}")
            return False

    async def save_user_roles(self, member):
        """Sauvegarde les r√¥les d'un membre (sauf r√¥le temporaire)"""
        roles_to_save = []
        for role in member.roles:
            # Ignorer @everyone et le r√¥le temporaire
            if role.id != member.guild.default_role.id and role.id != TEMP_ROLE_ID:
                roles_to_save.append(role.id)

        self.saved_roles[member.id] = roles_to_save
        logger.info(f"R√¥les sauvegard√©s pour {member.display_name}: {len(roles_to_save)} r√¥les")

    async def restore_user_roles(self, member):
        """Restaure les r√¥les sauvegard√©s d'un membre"""
        if member.id not in self.saved_roles:
            return False

        guild = member.guild
        roles_to_restore = []

        for role_id in self.saved_roles[member.id]:
            role = guild.get_role(role_id)
            if role:
                roles_to_restore.append(role)

        if roles_to_restore:
            try:
                await member.add_roles(*roles_to_restore, reason="Restauration des r√¥les apr√®s sanction")
                logger.info(f"R√¥les restaur√©s pour {member.display_name}: {len(roles_to_restore)} r√¥les")
            except Exception as e:
                logger.error(f"Erreur lors de la restauration des r√¥les pour {member.display_name}: {e}")
                return False

        # Supprimer la sauvegarde apr√®s restauration
        del self.saved_roles[member.id]
        return True

    async def apply_sanction(self, ctx, member, sanction_role_id, action_name):
        """Applique une sanction (mute ou prison) √† un membre"""
        try:
            guild = ctx.guild
            sanction_role = guild.get_role(sanction_role_id)

            if not sanction_role:
                await ctx.send(f"‚ùå Erreur: R√¥le de {action_name} non trouv√© dans la configuration.")
                return False

            # V√©rifier si le membre a d√©j√† ce r√¥le
            if sanction_role in member.roles:
                await ctx.send(f"‚ö†Ô∏è {member.mention} poss√®de d√©j√† le r√¥le {sanction_role.name}.")
                return False

            # Sauvegarder les r√¥les actuels
            await self.save_user_roles(member)

            # Supprimer tous les r√¥les sauf @everyone
            roles_to_remove = [role for role in member.roles if role.id != guild.default_role.id]
            if roles_to_remove:
                await member.remove_roles(*roles_to_remove, reason=f"{action_name} par {ctx.author}")

            # Ajouter le r√¥le de sanction
            await member.add_roles(sanction_role, reason=f"{action_name} par {ctx.author}")

            # Message de confirmation avec un Embed
            embed = discord.Embed(
                title=f"üîí {action_name} appliqu√©(e)",
                description=f"{member.mention} a √©t√© {action_name.lower()}(e) avec succ√®s!",
                color=0xff9900,
                timestamp=datetime.utcnow()
            )
            await ctx.send(embed=embed)

            # Log de l'action
            await self.log_action(
                f"{action_name} appliqu√©(e)",
                ctx.author,
                member,
                sanction_role
            )
            logger.info(f"{member.display_name} {action_name.lower()}(e) par {ctx.author.display_name}")
            return True

        except discord.Forbidden:
            await ctx.send("‚ùå Je n'ai pas les permissions n√©cessaires pour g√©rer les r√¥les de ce membre.")
            logger.error(f"Permissions insuffisantes pour {action_name.lower()} {member.display_name}")
            return False

        except Exception as e:
            await ctx.send(f"‚ùå Une erreur s'est produite lors de l'application de la sanction: {str(e)}")
            logger.error(f"Erreur lors de l'application de la sanction √† {member.display_name}: {e}")
            return False

# Initialisation de la classe de v√©rification
verification_bot = VerificationBot(bot)

@bot.event
async def on_ready():
    """√âv√©nement d√©clench√© quand le bot est pr√™t"""
    logger.info(f'{bot.user} est connect√© et pr√™t!')
    
    # V√©rifier la configuration
    guild = bot.get_guild(GUILD_ID)
    if not guild:
        logger.error(f"Serveur Discord (ID: {GUILD_ID}) non trouv√©")
        return
        
    missing_roles = []
    if not guild.get_role(TEMP_ROLE_ID):
        missing_roles.append(f"R√¥le temporaire (ID: {TEMP_ROLE_ID})")
    if not guild.get_role(MEN_ROLE_ID):
        missing_roles.append(f"R√¥le hommes (ID: {MEN_ROLE_ID})")
    if not guild.get_role(WOMEN_ROLE_ID):
        missing_roles.append(f"R√¥le femmes (ID: {WOMEN_ROLE_ID})")
        
    if missing_roles:
        logger.warning(f"R√¥les manquants: {', '.join(missing_roles)}")
        
    if not bot.get_channel(LOG_CHANNEL_ID):
        logger.warning(f"Canal de logs (ID: {LOG_CHANNEL_ID}) non trouv√©")

@bot.command(name='help1')
async def help1(ctx):
    """Affiche l'aide avec toutes les commandes disponibles"""
    embed = discord.Embed(
        title="üìú Commandes du Bot",
        color=0x0099ff,
        timestamp=datetime.utcnow()
    )
    
    embed.add_field(name="V√©rification", value="`+men @membre` - V√©rifie un membre comme masculin\n`+wom @membre` - V√©rifie un membre comme f√©minin", inline=False)
    embed.add_field(name="Sanctions", value="`+mute @membre` - Mute un membre\n`+hebs @membre` - Envoie un membre en prison\n`+unhebs @membre` - Lib√®re un membre de la prison", inline=False)
    embed.add_field(name="Informations", value="`+status` - Affiche l'√©tat du bot\n`+pending` - Liste les membres en attente de v√©rification", inline=False)
    
    await ctx.send(embed=embed)

# Autres commandes comme men, wom, mute, unmute, etc. sont √† inclure comme avant

bot.run(DISCORD_TOKEN)
